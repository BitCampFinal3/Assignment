# [------------------------------ 문제 상황 ------------------------------]
# 목표 높이 = V
# 낮 시간 동안 오를 수 있는 높이 = A
# 밤 시간 동안 미끄러지는 높이 = B
# 해당 조건으로 목표 높이 도달을 위해 며칠이 걸리는가?



# [------------------------------ 해결 과정 ------------------------------]
# [-- 수학 공식 --]
# (1) 최종적으로 올라가야 하는 높이 = V - B
# --> 낮 시간에 목표 높이(V)까지 오르기 때문
# (2) 하루에 올라가는 높이 = A - B
# --> 낮 시간에 오르는 높이(A)와 밤 시간 동안 미끄러지는 높이(B) 고려
# (3) 소요되는 날짜 = ((V - B) / (A - B))의 값을 올림 한 것
# --> 예시) 1.2일이 걸린 경우 1.2일이 걸린 것이 아니라 2일이 걸려서 도착한 것이기 때문ㄴ



# [-- 코드 --]
# (2) math 함수 호출 --> ceil 함수 사용을 위함
import math

# (1) A, B, V 를 순차적으로 입력 받아 공백을 기준으로 해당 값을 분리시킴
# --> 분리된 값은 순차적으로 해당하는 변수에 입력됨
A, B, V = map(int, input().split())

# (3-1) (V - B) / (A - B)
# --> 수학 공식 대입
# (3-2) math.ceil()
# --> () 내부의 값을 올림함
# (3-3) print
# --> 해당 값 출력
print(math.ceil((V - B)/(A - B)))



# [------------------------------ 참고 ------------------------------]
# 반올림 / 올림 / 내림

# 반올림(a는 특정 값)
# round(a) : 반올림 함수  // !주의 = round 함수는 math 함수를 import 하지 않아도 됨

# 올림(a는 특정 값)
# (1) math.ceil(a) : a 값을 무조건 올림
# (2) round(a + 0.5) : 반올림 특성 활용
# --> round(1.3 + 0.5) ==> 1.8의 반올림 ==> 2 (결과값은 1.3의 올림인 2와 동일)
# --> round(1.7 + 0.5) ==> 2.2의 반올림 ==> 2 (결과값은 1.7의 올림인 2와 동일)

# 내림(a는 특정 값)
# (1) math.floor(a) : a 값을 무조건 내림
# (2) int(a) : int 형태 변환 기능 활용
# (3) round(a - 0.5) : 반올림 특성 활용
# --> round(1.3 - 0.5) ==> 0.8의 반올림 ==> 1 (결과값은 1.3의 내림인 1와 동일)
# --> round(1.7 - 0.5) ==> 1.2의 반올림 ==> 1 (결과값은 1.7의 내림인 1와 동일)